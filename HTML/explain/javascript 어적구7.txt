배열
let arr = [1,2,3,4,5,6,7]
let arr = new Array()
for
while
arr[0] 대괄호를 사용해 각 인덱스를 부를 수 있다.
pop, push, shift, unshift << 배열 자체에서 기본 제공하는 함수들

배열 메소드
Array.prototype으로부터 메소드와 프로퍼티를 상속받음
1. 원본 배열을 변경하지 않고 참조만 하는 메소드
1)join() 배열의 모든 요소를 하나의 문자열로 반환
2)slice() 시작인덱스 종료 인덱스 바로 앞까지의 모든 배열요소를 추출하여 새로운 배열로 반환
3)concat() 배열의 뒤에 인수로 전달받은 배열을 합쳐서 새로운 배열을 반환
4)indexOf() 전달받은 값과 동일한 배열 요소가 처음으로 위치하는 인덱스를 반환
5)includes() 전달받은 값과 동일한 배열 요소가 있으면 true, 없으면 false를 반환

if(includes(document.querySelectorAll.('li')[0].innerHTML) = true){
	splice(indexOf(includes(document.querySelectorAll.('li')[0].innerHTML),0)
}

do{

}while()

for(let i = 1;document.querySelectorAll.('li')[0].innerHTML) = false)

2. 원본 배열을 변경하는 메소드
1)push() 배열의 마지막 요소를 추가
2)pop() 배열의 마지막 요소 제거
3)shift() 배열의 첫 번째 요소 제거
4)unshift() 배열의 첫 번째 요소 추가
5)splice() 원하는 자리에 배열 요소를 제거하거나 새로운 배열 요소를 추가
6)reverse() 배열 요소의 순서를 반대로 교체함

Number 메소드
Number 객체에 정의되어 있는 숫자와 관련된 작업을 할 때 사용되는 메소드
1.parselnt() 문자열에 포함된 숫자 부분을 정수 형태로 형변환
2. parseFloat() 문자열에 포함된 숫자 부분을 실수 형태로 형변환
3. isNaN() 전달된 값이 NaN인지 아닌지를 검사(NaN이면 true, 아니면 false 반환)
4. isInteger() 전달된 값이 정수인지 아닌지를 검사(정수면 true, 아니면 false 반환)

객체 - 다양한 데이터를 담을 수 있음
객체 리터럴 방식
let user = {}
let user = {
	name: "green",
	age: 30
}
접근방식(어떻게 부를거냐)
user.name
user['name']
객체 생성자 방식
let user = new Object();


forEach
for(let item of arr)

for(let item in obj){
	obj[item]
}























