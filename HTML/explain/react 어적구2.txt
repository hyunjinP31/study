react
- 컴포넌트 -> 함수형 컴포넌트, 클래스형 컴포넌트 (예전에는 클래스형이 많이 쓰였지만 현재는 함수형 컴포넌트가 많이 쓰인다.)
함수형 컴포넌트 정식 구문
function 이름 (){
	return<>;
}
함수형 컴포넌트 축약 구문
const 이름 = ()->{
	return<>;
}
클래스형 컴포넌트 구문
class 이름 extends Component {
	render(){
		return()
	}
}
*props -> properties를 줄인 표현, 컴포넌트 속성
자식 컴포넌트를 사용하는 부모 컴포넌트에서 설정해서 자식 컴포넌트에게 전달

const App = ()=>{
	return
	<div>
		<MyComponent name="green" age="20">
			<h3>여기는 children자리 입니다.</h3>
		</MyComponent>
	</div>
}

const MyComponent = ({name, age, children})=> {	//구조분해할당으로 처음부터 변수로 받기
	return <div>
		제 이름은 {name}입니다.
		제 나이는 {age}입니다.
		{children}	//위의 h3 태그와 그 안의 내용을 출력해준다.
	</div>
}
MyComponent.defaultProps = {	//부모 요소에 해당 내용이 없을 때 이 내용이 default로 적힌다.
	name: '기본이름',
	age: '20',
}
MyComponent.propTypes = {	//propTypes import 해주어야 함 (소문자 시작)
	name: PropTypes.string	// 대문자 시작
}
import PropTypes from 'prop-types'; 
class MyComponent extends Component{
	const {name, age, children} = this.props;
	render(
		return()
	)
}

* state 컴포넌트 내부에서 바뀔 수 있는 값 -> state가 변경되면 화면을 다시 그림
함수형
import { useState } from 'react';	//react가 가진 useState를 import 시켜주어야 한다.
const MyComState = () => {
	const [countNum, setCountNum ] useState(0);		//배열의 첫 번째 값에는 초깃값, 두 번째에는 함수가 담겨있는데 이 함수로 초깃값을 조정한다. 처음 값에 직접 접근할 수 없고 함수를 통해 관리해주어야 한다.
	setCountNum(20)
}

클래스형
class MyComState extends Component {
	//constructor(){	//정식 구문이지만 보통은 밑의 축약형을 쓴다.
		//this.state = {
			//countNum : 0,
		//}
	//}
	state = {		//위의 구문의 축약형
		countNum
	}
	render(){
	const {countNum} = this.state
		return(
			<div>
				<h1>{countNum}</h1>
				<button
					onClick={()=>{
					this.setState ({countNum: countNum+1})
					}}
				>+1</button>
			</div>
		)
	}
}
state 쓰는 법 정리
함수형 컴포넌트
useState import
const [state, setState] = useState(초기값);
class
state 접근 this.state
state 변경 this.setState({})




ref (reference) : DOM에 이름달기
1. 클래스형 컴포넌트
1)ref객체 생성
const input = React.createRef()
2)DOM 요소 ref속성으로 지정
input ref={this.input}
3) DOM요소 접근
this.input.current

2. 함수형 컴포넌트
1)useRef 임폴트
import { useRef } from 'react';
2) ref 객체
const input = useRef();
3) DOM요소 지정
<input ref={input} />
4)DO<요소 접근
input.current

배열다루기
1.배열에 항목을 추가하기
CreateUser.js














































